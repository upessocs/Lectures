# Node.js Lab Manual - Experiments 7 & 8

## Table of Contents
1. [Experiment 7: State Management](#experiment-7-state-management)
2. [Experiment 8: Working with Data](#experiment-8-working-with-data)
3. [Complete File Structure](#complete-file-structure)

---

## Experiment 7: State Management

### Objective
- Understand session management in Node.js
- Learn to create and destroy sessions
- Work with cookies in Node.js applications

### Theory
**Sessions** are server-side storage of information that persists across multiple requests from the same user. **Cookies** are small pieces of data stored on the client-side that are sent back to the server with each request.

### Prerequisites
```bash
npm install express express-session cookie-parser
```

### Part A: Session Management

#### Code Snippet 1: Basic Session Setup
```javascript
// app.js - Basic Express server with session
const express = require('express');
const session = require('express-session');

const app = express();
const PORT = 3000;

// Session configuration
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true,
    cookie: { 
        secure: false, // Set to true in production with HTTPS
        maxAge: 24 * 60 * 60 * 1000 // 24 hours
    }
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
```

**Explanation:**
- `secret`: Used to sign the session ID cookie
- `resave`: Forces session to be saved back to store
- `saveUninitialized`: Forces uninitialized sessions to be saved
- `maxAge`: Session expiry time in milliseconds

#### Code Snippet 2: Creating Sessions
```javascript
// Session creation routes
app.get('/login', (req, res) => {
    res.send(`
        <h2>Login Form</h2>
        <form action="/login" method="POST">
            <input type="text" name="username" placeholder="Username" required>
            <input type="password" name="password" placeholder="Password" required>
            <button type="submit">Login</button>
        </form>
    `);
});

app.post('/login', (req, res) => {
    const { username, password } = req.body;
    
    // Simple authentication (In real apps, use proper authentication)
    if (username === 'admin' && password === 'password') {
        // Create session
        req.session.isAuthenticated = true;
        req.session.username = username;
        req.session.loginTime = new Date().toISOString();
        
        res.send(`
            <h2>Login Successful!</h2>
            <p>Welcome, ${username}!</p>
            <a href="/dashboard">Go to Dashboard</a>
        `);
    } else {
        res.send(`
            <h2>Login Failed</h2>
            <p>Invalid credentials</p>
            <a href="/login">Try Again</a>
        `);
    }
});
```

**Use Case:** User authentication system where login credentials are verified and user information is stored in session.

#### Code Snippet 3: Using Sessions
```javascript
// Protected route using session
app.get('/dashboard', (req, res) => {
    if (req.session.isAuthenticated) {
        res.send(`
            <h2>Dashboard</h2>
            <p>Welcome back, ${req.session.username}!</p>
            <p>Login Time: ${req.session.loginTime}</p>
            <p>Session ID: ${req.sessionID}</p>
            <a href="/logout">Logout</a>
        `);
    } else {
        res.send(`
            <h2>Access Denied</h2>
            <p>Please login first</p>
            <a href="/login">Login</a>
        `);
    }
});
```

**Use Case:** Protecting routes that require authentication by checking session data.

#### Code Snippet 4: Destroying Sessions
```javascript
// Session destruction
app.get('/logout', (req, res) => {
    if (req.session) {
        // Destroy the session
        req.session.destroy((err) => {
            if (err) {
                console.error('Error destroying session:', err);
                res.send('Error logging out');
            } else {
                res.send(`
                    <h2>Logged Out Successfully</h2>
                    <p>Your session has been destroyed</p>
                    <a href="/login">Login Again</a>
                `);
            }
        });
    } else {
        res.send('No active session found');
    }
});
```

**Use Case:** Securely logging out users by destroying their session data.

### Part B: Cookie Management

#### Code Snippet 5: Cookie Setup
```javascript
// cookie-demo.js
const express = require('express');
const cookieParser = require('cookie-parser');

const app = express();
app.use(cookieParser());

// Create cookie
app.get('/set-cookie', (req, res) => {
    // Set different types of cookies
    res.cookie('username', 'john_doe', {
        maxAge: 24 * 60 * 60 * 1000, // 24 hours
        httpOnly: true, // Cannot be accessed via JavaScript
        secure: false // Set to true in production
    });
    
    res.cookie('preferences', JSON.stringify({
        theme: 'dark',
        language: 'en'
    }), {
        maxAge: 30 * 24 * 60 * 60 * 1000 // 30 days
    });
    
    res.send('Cookies have been set!');
});
```

**Explanation:**
- `maxAge`: Cookie expiration time
- `httpOnly`: Prevents client-side script access
- `secure`: Only send cookie over HTTPS

#### Code Snippet 6: Reading Cookies
```javascript
// Read cookies
app.get('/get-cookies', (req, res) => {
    const cookies = req.cookies;
    
    if (Object.keys(cookies).length === 0) {
        res.send('No cookies found');
    } else {
        let cookieInfo = '<h2>Your Cookies:</h2><ul>';
        for (const [name, value] of Object.entries(cookies)) {
            cookieInfo += `<li><strong>${name}:</strong> ${value}</li>`;
        }
        cookieInfo += '</ul>';
        
        res.send(cookieInfo);
    }
});
```

**Use Case:** Retrieving and displaying user preferences or session information stored in cookies.

#### Code Snippet 7: Deleting Cookies
```javascript
// Delete cookies
app.get('/delete-cookie', (req, res) => {
    // Clear specific cookie
    res.clearCookie('username');
    res.clearCookie('preferences');
    
    res.send(`
        <h2>Cookies Deleted</h2>
        <p>All cookies have been removed</p>
        <a href="/get-cookies">Check Cookies</a>
    `);
});
```

**Use Case:** Clearing user data when they log out or want to reset preferences.

---

## Experiment 8: Working with Data

### Objective
- Connect Node.js application to MongoDB
- Perform CRUD operations
- Build a complete shopping center application

### Prerequisites
```bash
npm install mongoose express body-parser
```

### Part A: MongoDB Connection

#### Code Snippet 8: Database Connection
```javascript
// database/connection.js
const mongoose = require('mongoose');

const connectDB = async () => {
    try {
        await mongoose.connect('mongodb://localhost:27017/labdb', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('MongoDB connected successfully');
    } catch (error) {
        console.error('Database connection failed:', error.message);
        process.exit(1);
    }
};

module.exports = connectDB;
```

**Explanation:** Establishes connection to MongoDB database with error handling and process exit on failure.

### Part B: Student Management System

#### Code Snippet 9: Student Schema
```javascript
// models/Student.js
const mongoose = require('mongoose');

const studentSchema = new mongoose.Schema({
    studentId: {
        type: String,
        required: true,
        unique: true
    },
    name: {
        type: String,
        required: true,
        trim: true
    },
    email: {
        type: String,
        required: true,
        unique: true,
        lowercase: true
    },
    age: {
        type: Number,
        required: true,
        min: 16,
        max: 100
    },
    course: {
        type: String,
        required: true
    },
    grade: {
        type: String,
        enum: ['A', 'B', 'C', 'D', 'F'],
        default: 'C'
    },
    enrollmentDate: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model('Student', studentSchema);
```

**Use Case:** Defining the structure for student records with validation rules.

#### Code Snippet 10: Student CRUD Operations
```javascript
// routes/students.js
const express = require('express');
const router = express.Router();
const Student = require('../models/Student');

// Create student
router.post('/add', async (req, res) => {
    try {
        const student = new Student(req.body);
        await student.save();
        res.status(201).json({
            success: true,
            message: 'Student added successfully',
            data: student
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: error.message
        });
    }
});

// Get all students
router.get('/all', async (req, res) => {
    try {
        const students = await Student.find();
        res.json({
            success: true,
            count: students.length,
            data: students
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// Search students
router.get('/search', async (req, res) => {
    try {
        const { name, course, grade } = req.query;
        let searchQuery = {};
        
        if (name) searchQuery.name = new RegExp(name, 'i');
        if (course) searchQuery.course = new RegExp(course, 'i');
        if (grade) searchQuery.grade = grade;
        
        const students = await Student.find(searchQuery);
        
        res.json({
            success: true,
            count: students.length,
            searchCriteria: searchQuery,
            data: students
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

module.exports = router;
```

**Use Case:** Complete student management with add, retrieve, and search functionality using various criteria.

### Part C: Shopping Center Application

#### Code Snippet 11: Product Schema
```javascript
// models/Product.js
const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
    productId: {
        type: String,
        required: true,
        unique: true
    },
    name: {
        type: String,
        required: true,
        trim: true
    },
    category: {
        type: String,
        required: true,
        enum: ['Electronics', 'Clothing', 'Food', 'Books', 'Sports', 'Home']
    },
    price: {
        type: Number,
        required: true,
        min: 0
    },
    stock: {
        type: Number,
        required: true,
        min: 0
    },
    description: {
        type: String,
        maxlength: 500
    },
    createdAt: {
        type: Date,
        default: Date.now
    },
    lastUpdated: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model('Product', productSchema);
```

#### Code Snippet 12: Sales Schema
```javascript
// models/Sale.js
const mongoose = require('mongoose');

const saleSchema = new mongoose.Schema({
    saleId: {
        type: String,
        required: true,
        unique: true
    },
    productId: {
        type: String,
        required: true
    },
    productName: String,
    quantity: {
        type: Number,
        required: true,
        min: 1
    },
    unitPrice: {
        type: Number,
        required: true
    },
    totalAmount: {
        type: Number,
        required: true
    },
    saleDate: {
        type: Date,
        default: Date.now
    },
    customerName: String
});

module.exports = mongoose.model('Sale', saleSchema);
```

#### Code Snippet 13: Shopping Center Operations
```javascript
// routes/shop.js
const express = require('express');
const router = express.Router();
const Product = require('../models/Product');
const Sale = require('../models/Sale');

// Add product
router.post('/products/add', async (req, res) => {
    try {
        const product = new Product(req.body);
        await product.save();
        res.status(201).json({
            success: true,
            message: 'Product added successfully',
            data: product
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: error.message
        });
    }
});

// Update product
router.put('/products/:productId', async (req, res) => {
    try {
        req.body.lastUpdated = new Date();
        const product = await Product.findOneAndUpdate(
            { productId: req.params.productId },
            req.body,
            { new: true, runValidators: true }
        );
        
        if (!product) {
            return res.status(404).json({
                success: false,
                message: 'Product not found'
            });
        }
        
        res.json({
            success: true,
            message: 'Product updated successfully',
            data: product
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: error.message
        });
    }
});

// Delete product
router.delete('/products/:productId', async (req, res) => {
    try {
        const product = await Product.findOneAndDelete({ productId: req.params.productId });
        
        if (!product) {
            return res.status(404).json({
                success: false,
                message: 'Product not found'
            });
        }
        
        res.json({
            success: true,
            message: 'Product deleted successfully'
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// Stock report
router.get('/reports/stock', async (req, res) => {
    try {
        const products = await Product.find().select('productId name category stock price');
        
        const stockReport = {
            totalProducts: products.length,
            lowStockItems: products.filter(p => p.stock < 10),
            outOfStock: products.filter(p => p.stock === 0),
            categoryWiseStock: {},
            totalInventoryValue: 0
        };
        
        products.forEach(product => {
            // Category-wise grouping
            if (!stockReport.categoryWiseStock[product.category]) {
                stockReport.categoryWiseStock[product.category] = [];
            }
            stockReport.categoryWiseStock[product.category].push(product);
            
            // Total inventory value
            stockReport.totalInventoryValue += product.stock * product.price;
        });
        
        res.json({
            success: true,
            data: stockReport
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// Process sale
router.post('/sales/add', async (req, res) => {
    try {
        const { productId, quantity, customerName } = req.body;
        
        // Find product
        const product = await Product.findOne({ productId });
        if (!product) {
            return res.status(404).json({
                success: false,
                message: 'Product not found'
            });
        }
        
        // Check stock
        if (product.stock < quantity) {
            return res.status(400).json({
                success: false,
                message: `Insufficient stock. Available: ${product.stock}`
            });
        }
        
        // Create sale record
        const sale = new Sale({
            saleId: `SALE_${Date.now()}`,
            productId: product.productId,
            productName: product.name,
            quantity,
            unitPrice: product.price,
            totalAmount: product.price * quantity,
            customerName
        });
        
        await sale.save();
        
        // Update product stock
        product.stock -= quantity;
        await product.save();
        
        res.status(201).json({
            success: true,
            message: 'Sale processed successfully',
            data: sale
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: error.message
        });
    }
});

module.exports = router;
```

**Use Case:** Complete e-commerce functionality including inventory management, sales processing, and reporting.

---

## Complete File Structure

```
nodejs-lab-experiments/
├── package.json
├── package-lock.json
├── README.md
├── .gitignore
├── server.js
├── database/
│   └── connection.js
├── models/
│   ├── Student.js
│   ├── Product.js
│   └── Sale.js
├── routes/
│   ├── sessions.js
│   ├── cookies.js
│   ├── students.js
│   └── shop.js
├── middleware/
│   └── auth.js
├── public/
│   ├── css/
│   │   └── style.css
│   └── js/
│       └── script.js
└── views/
    ├── login.html
    ├── dashboard.html
    └── index.html
```

### Main Server File
```javascript
// server.js
const express = require('express');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const connectDB = require('./database/connection');

const app = express();
const PORT = process.env.PORT || 3000;

// Connect to database
connectDB();

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(session({
    secret: 'lab-experiment-secret-key',
    resave: false,
    saveUninitialized: true,
    cookie: { maxAge: 24 * 60 * 60 * 1000 }
}));

// Serve static files
app.use(express.static('public'));

// Routes
app.use('/api/sessions', require('./routes/sessions'));
app.use('/api/cookies', require('./routes/cookies'));
app.use('/api/students', require('./routes/students'));
app.use('/api/shop', require('./routes/shop'));

// Home route
app.get('/', (req, res) => {
    res.send(`
        <h1>Node.js Lab Experiments</h1>
        <h2>Available Endpoints:</h2>
        <ul>
            <li><a href="/api/sessions/login">Session Management</a></li>
            <li><a href="/api/cookies/set-cookie">Cookie Management</a></li>
            <li>Students API: /api/students/</li>
            <li>Shopping Center API: /api/shop/</li>
        </ul>
    `);
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
```

### Package.json
```json
{
  "name": "nodejs-lab-experiments",
  "version": "1.0.0",
  "description": "Lab experiments for Node.js - State Management and Database Operations",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"No tests specified\""
  },
  "dependencies": {
    "express": "^4.18.2",
    "express-session": "^1.17.3",
    "cookie-parser": "^1.4.6",
    "mongoose": "^7.5.0",
    "body-parser": "^1.20.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "keywords": ["nodejs", "express", "mongodb", "sessions", "cookies"],
  "author": "Lab Student",
  "license": "MIT"
}
```

### Installation and Setup Instructions

1. **Initialize the project:**
   ```bash
   npm init -y
   npm install express express-session cookie-parser mongoose body-parser
   npm install -D nodemon
   ```

2. **Start MongoDB:**
   ```bash
   # On Windows
   net start MongoDB
   
   # On Linux/Mac
   sudo systemctl start mongod
   ```

3. **Run the application:**
   ```bash
   npm run dev
   ```

### Testing the Applications

**Note: Do not execute these commands yet - this is for reference:**

1. **Session Management Test:**
   ```bash
   curl -X POST http://localhost:3000/api/sessions/login \
        -H "Content-Type: application/json" \
        -d '{"username":"admin","password":"password"}'
   ```

2. **Student Management Test:**
   ```bash
   curl -X POST http://localhost:3000/api/students/add \
        -H "Content-Type: application/json" \
        -d '{"studentId":"STU001","name":"John Doe","email":"john@example.com","age":20,"course":"Computer Science"}'
   ```

3. **Shopping Center Test:**
   ```bash
   curl -X POST http://localhost:3000/api/shop/products/add \
        -H "Content-Type: application/json" \
        -d '{"productId":"PROD001","name":"Laptop","category":"Electronics","price":50000,"stock":10}'
   ```

### Key Learning Outcomes

1. **Session Management:** Understanding server-side state persistence
2. **Cookie Handling:** Client-side data storage and retrieval
3. **Database Operations:** CRUD operations with MongoDB
4. **API Design:** RESTful endpoint creation
5. **Error Handling:** Proper error responses and validation
6. **Data Modeling:** Schema design and relationships

This lab manual provides a comprehensive foundation for understanding state management and database operations in Node.js applications.